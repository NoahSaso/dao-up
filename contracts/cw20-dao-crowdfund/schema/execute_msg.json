{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Deposits funds to the contract and mints tokens for the sender. Can only be executed if the campaign is not closed.",
      "type": "object",
      "required": [
        "fund"
      ],
      "properties": {
        "fund": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Used for issuing refunds, swaping to governance tokens, and the initial funding of the contract by the DAO.\n\nSending funding tokens to the contract will execute a refund if the campaign is open. If the campaign is closed it will give staked governance tokens to the sender.\n\nSending governance tokens to the contract will seed the contract and put it in an open state. The DAO must do this before the campaign can begin.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Closes the campaign and returns governance tokens to the DAO. Refunds are still accepted but funding is no longer possible.",
      "type": "object",
      "required": [
        "close"
      ],
      "properties": {
        "close": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Replaces the campaign's campaign information with `campaign`.",
      "type": "object",
      "required": [
        "update_campaign"
      ],
      "properties": {
        "update_campaign": {
          "type": "object",
          "required": [
            "campaign"
          ],
          "properties": {
            "campaign": {
              "$ref": "#/definitions/Campaign"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Campaign": {
      "type": "object",
      "required": [
        "description",
        "description_image_urls",
        "hidden",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "description_image_urls": {
          "description": "The image URLs displayed with the campaign's description.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discord": {
          "type": [
            "string",
            "null"
          ]
        },
        "hidden": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "profile_image_url": {
          "description": "The image URL used as the campaign's profile photo.",
          "type": [
            "string",
            "null"
          ]
        },
        "twitter": {
          "type": [
            "string",
            "null"
          ]
        },
        "website": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
